'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports.createElement = createElement;
exports.appendChild = appendChild;
exports.createTextNode = createTextNode;
exports.setAttribute = setAttribute;
exports.createDocumentFragment = createDocumentFragment;
exports.normalizeTagName = normalizeTagName;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var VOID_TAGS = 'area base br col command embed hr img input keygen link meta param source track wbr'.split(' ');

var Element = (function () {
  function Element(tagName) {
    _classCallCheck(this, Element);

    this.tagName = tagName.toLowerCase();
    this.isVoid = VOID_TAGS.indexOf(this.tagName) !== -1;
    this.childNodes = [];
    this.attributes = [];
  }

  _createClass(Element, [{
    key: 'appendChild',
    value: function appendChild(element) {
      this.childNodes.push(element);
    }
  }, {
    key: 'setAttribute',
    value: function setAttribute(propName, propValue) {
      this.attributes.push(propName, propValue);
    }
  }, {
    key: 'toString',
    value: function toString() {
      var html = '<' + this.tagName;

      if (this.attributes.length) {
        for (var i = 0; i < this.attributes.length; i = i + 2) {
          var propName = this.attributes[i],
              propValue = this.attributes[i + 1];
          html += ' ' + propName + '="' + propValue + '"';
        }
      }
      html += '>';

      if (!this.isVoid) {
        for (var i = 0; i < this.childNodes.length; i++) {
          html += this.childNodes[i].toString();
        }
        html += '</' + this.tagName + '>';
      }

      return html;
    }
  }]);

  return Element;
})();

function addHTMLSpaces(text) {
  return text.replace(/  /g, ' &nbsp;');
}

var TextNode = (function () {
  function TextNode(value) {
    _classCallCheck(this, TextNode);

    this.value = value;
  }

  _createClass(TextNode, [{
    key: 'toString',
    value: function toString() {
      return addHTMLSpaces(this.value);
    }
  }]);

  return TextNode;
})();

function createElement(tagName) {
  return new Element(tagName);
}

function appendChild(target, child) {
  target.appendChild(child);
}

function createTextNode(text) {
  return new TextNode(text);
}

function setAttribute(element, propName, propValue) {
  element.setAttribute(propName, propValue);
}

function createDocumentFragment() {
  return createElement('div');
}

function normalizeTagName(name) {
  return name.toLowerCase();
}